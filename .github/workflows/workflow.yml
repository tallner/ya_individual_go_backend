# This is a basic workflow to help you get started with Actions
name: Build and deploy my Golang backend app to linode

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v3

      - name: Example Workflow Step
        run: |
          if [[ -n "${GITHUB_ACTIONS}" ]]; then
            sed -i'' -e 's/{{ GITHUB_ACTIONS }}/true/g' templates/home.html
          else
            sed -i'' -e 's/{{ GITHUB_ACTIONS }}/false/g' templates/home.html
          fi
          echo "GITHUB_ACTIONS environment variable: ${{ github.sha }} "
          echo "GITHUB_ACTIONS environment variable: ${{ github.action_status }} "
          echo "GITHUB_ACTIONS environment variable: ${{ env.GITHUB_ACTIONS }} "
          echo "GITHUB_ACTIONS environment variable: ${{ github.GITHUB_ACTIONS }} "
          echo "GITHUB_ACTIONS environment variable: $GITHUB_ACTIONS "


        # get the sha created in github during comit and show on the template html site
      # this makes it easier to see what comit is deployed when testing
      - name: Modify HTML file
        if: ${{ env.GITHUB_ACTIONS }}
        run: | 
          sed -i'' \
            -e "s/{{ GITHUB_SHA }}/{{ $GITHUB_ACTIONS }}/g" \
            -e "s/{ GITHUB_SHA }/{ $GITHUB_ACTIONS }/g" \
            -e "s/{ GITHUB_SHA }/$GITHUB_ACTIONS/g" \
            -e "s/{ GITHUB_ACTIONS }/${{ env.GITHUB_ACTIONS }}/g" \
            templates/home.html

        
 #     - name: Create Kubernetes secret

 #       run: |
  #        kubectl create secret docker-registry regcred2 \
   #         --docker-server=docker.io \
    #        --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
     #       --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
      #      --docker-email=${{ secrets.DOCKERHUB_EMAIL }}

        
      - name: login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Docker Build and Push, Kubernetes apply
        run: |
          docker build --tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }}
          
          export DOCKER_CONFIG=$(cat ~/.docker/config.json | base64 -w 0)

          sed -i'' \
           -e 's/DOCKERHUB_USERNAME/${{ secrets.DOCKERHUB_USERNAME }}/g' \
           -e 's/DOCKERHUB_REPOSITORY/${{ secrets.DOCKERHUB_REPOSITORY }}/g' \
           -e 's/IMAGE_LABEL/${{ github.sha }}/g' \
           -e "s/DOCKER_CONFIG/$DOCKER_CONFIG/g" \
           linodedeploy.yaml
          
          kubectl apply -f linodedeploy.yaml

      
