# This is a basic workflow to help you get started with Actions
name: Build and deploy my Golang backend app to linode

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v3
      
      # get the sha created in github during comit and show on the template html site
      # this makes it easier to see what comit is deployed when testing
      - name: Modify HTML file
        run: |
          sed -i'' -e "s/{{ .GITHUB_SHA_PLACEHOLDER }}/${{ github.sha }}/g" templates/home.html

      # Run unit tests
      - name: Run unit tests
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.3

      - name: Execute tests
        run: |
          go test ./...
          if [ $? -ne 0 ]; then
            echo "Some tests failed"
            exit 1
          fi
      
      - name: login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Docker Build and Push, Kubernetes apply
        run: |
          docker build --tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }}
          
          export DOCKER_CONFIG=$(cat ~/.docker/config.json | base64 -w 0)

          sed -i'' \
           -e 's/DOCKERHUB_USERNAME/${{ secrets.DOCKERHUB_USERNAME }}/g' \
           -e 's/DOCKERHUB_REPOSITORY/${{ secrets.DOCKERHUB_REPOSITORY }}/g' \
           -e 's/IMAGE_LABEL/${{ github.sha }}/g' \
           -e "s/DOCKER_CONFIG/$DOCKER_CONFIG/g" \
           linodedeploy.yaml
          
          kubectl apply -f linodedeploy.yaml

      - name: Send mail
        if: ${{ failure() }}
        uses: dawidd6/action-send-mail@v3
        with:
          # Specify connection via URL (replaces server_address, server_port, secure,
          # username and password)
          #
          # Format:
          #
          #  * smtp://user:password@server:port
          #  * smtp+starttls://user:password@server:port
          # connection_url: ${{secrets.MAIL_CONNECTION}}
          # Required mail server address if not connection_url:
          server_address: smtp.office365.com
          # Server port, default 25:
          server_port: 584
          # Optional whether this connection use TLS (default is true if server_port is 465)
          secure: true
          # Optional (recommended) mail server username:
          username:
          # Optional (recommended) mail server password:
          password:
          # Required mail subject:
          subject: Github Actions job result
          # Required recipients' addresses:
          to: ctallner@hotmail.com
          # Required sender full name (address can be skipped):
          from: me # <user@example.com>
          # Optional plain body:
          body: Build job of ${{github.repository}} completed unsuccessfully!
          # Optional HTML body read from file:
          html_body: 
          # Optional carbon copy recipients:
          cc: 
          # Optional blind carbon copy recipients:
          bcc: 
          # Optional recipient of the email response:
          reply_to: 
          # Optional Message ID this message is replying to:
          in_reply_to: 
          # Optional unsigned/invalid certificates allowance:
          ignore_cert: true
          # Optional converting Markdown to HTML (set content_type to text/html too):
          convert_markdown: true
          # Optional attachments:
          attachments: 
          # Optional priority: 'high', 'normal' (default) or 'low'
          priority: low